
// using map
// creating map of value -> index
// if target - arr[i] is found in map then return the index from map, else add into map

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> map;
        int n = nums.size();
        for(int i=0;i<n;i++){
            int diff = target - nums[i];
            if(map.find(diff) == map.end()){
                map[nums[i]] = i;

            }
            else{
                return {map[diff], i};
            }
        }

        return {-1,-1};
    }
};


// brute force:

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int size = nums.size();
        vector<int> ans;
        for(int i=0;i<size;i++){
            for(int j=i+1;j<size;j++){
                if(nums[i] + nums[j] == target){
                    ans.push_back(i);
                    ans.push_back(j);
                    
                }
            }
        }
        return ans;
    }
};

