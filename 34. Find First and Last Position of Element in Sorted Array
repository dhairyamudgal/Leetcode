


// binary search to find first and last separately

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans(2, -1);
        int n = nums.size();
        int start = 0;
        int end = n - 1;
        int mid;

        // Binary search to find the leftmost occurrence of the target
        while (start <= end) {
            mid = start + (end - start) / 2;

            if (nums[mid] == target) {
                ans[0] = mid;
                end = mid - 1;  // Continue searching in the left half
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }

        // If the target is not found, return immediately
        if (ans[0] == -1) {
            return ans;
        }

        start = ans[0];
        end = n - 1;

        // Binary search to find the rightmost occurrence of the target
        while (start <= end) {
            mid = start + (end - start) / 2;

            if (nums[mid] == target) {
                ans[1] = mid;
                start = mid + 1;  // Continue searching in the right half
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }

        return ans;
    }
};

