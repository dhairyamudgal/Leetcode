
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */


 // find two nodes poiting to the two nodes whoose data needs to be swapped
class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        
        int firstNumber = k;
        int secondNumber;
        ListNode* firstNode =NULL;
        ListNode* secondNode =NULL;

        int n =0;
        ListNode* temp = head;
        while(temp != NULL){
            temp = temp -> next;
            n++;
        }

        secondNumber = n-k+1;
        temp = head;
        while(firstNumber>1){
            temp = temp -> next;
            firstNumber--;
        }
        firstNode = temp;

        temp = head;

        while(secondNumber>1){
         temp = temp -> next;
            secondNumber--;
        }
        secondNode = temp;

        int data = firstNode -> val;
        firstNode -> val = secondNode -> val;
        secondNode -> val = data;

        return head;

    }
};
