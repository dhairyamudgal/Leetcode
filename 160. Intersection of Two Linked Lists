


// make a set to store all nodes, and return node if it is already in set
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *temp = headA;
        std::set<ListNode*> hs;
        
        while (temp != NULL) {
            if (hs.find(temp) == hs.end()) {
                hs.insert(temp);
            }
            temp = temp->next;
        } 

        temp = headB;
        while (temp != NULL) {
            if (hs.find(temp) != hs.end()) {
                return temp;
            }
            temp = temp->next;
        }
        
        return NULL;
    }
};
